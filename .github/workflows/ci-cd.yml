name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  DB_HOST: 127.0.0.1
  DB_USER: root
  DB_PASSWORD: root
  DB_NAME: ticketing
  DOCKER_USERNAME: test
  DOCKER_PASSWORD: test

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_NAME }}
        ports:
        - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h mariadb --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: npm ci

    - name: Lint
      run: npm run lint

    - name: Wait for MariaDB to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h ${{ env.DB_HOST }} -uroot -proot --silent; then
            echo "MariaDB is ready"
            exit 0
          fi
          echo "Waiting for MariaDB..."
          sleep 5
        done
        echo "MariaDB failed to start"
        exit 1
    - name: Seed database
      run: node fixtures/seed.js

    - name: Run unit tests
      run: npm run test:unit

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        DB_HOST: ${{ env.DB_HOST }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
        DB_NAME: ${{ env.DB_NAME }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/ticketing-app .

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/ticketing-app

    - name: Deploy to remote server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/ticketing-app
          docker stop ticketing-app || true
          docker rm ticketing-app || true
          docker run -d --name ticketing-app -p 80:3000             -e DB_HOST=localhost             -e DB_USER=${{ secrets.DB_USER }}             -e DB_PASSWORD=${{ secrets.DB_PASSWORD }}             -e DB_NAME=${{ secrets.DB_NAME }}             -e ADMIN_USER=${{ secrets.ADMIN_USER }}             -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}             ${{ secrets.DOCKER_USERNAME }}/ticketing-app
